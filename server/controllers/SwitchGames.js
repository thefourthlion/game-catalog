const SwitchGames = require("../models/SwitchGames"); exports.createSwitchGames = async (req, res) => { const page = req.query.page || 0;const limit = req.query.limit || 25; try { let newSwitchGames = new SwitchGames({name: req.body.name,seeds: req.body.seeds,date: req.body.date,size: req.body.size,torrentLink: req.body.torrentLink, }); await newSwitchGames.save(); res.send(newSwitchGames); } catch (err) { console.log(err); } }; exports.readSwitchGames = async (req, res) => { try { SwitchGames.find({}, (err, result) => { if (err) { res.json({ app: err }); } res.send(result); }).sort().skip(page * limit).limit(limit); } catch (err) { console.log(err); } }; exports.readSwitchGamesFromID = async (req, res) => { try { await SwitchGames.findById({ _id: req.params.id }, {}, (err, result) => { if (err) { res.json({ app: err }); } res.send(result); }); } catch (err) { console.log(err); } }; exports.updateSwitchGames = async (req, res) => { try { await SwitchGames.findByIdAndUpdate( req.params.id, {name: req.body.name,seeds: req.body.seeds,date: req.body.date,size: req.body.size,torrentLink: req.body.torrentLink, }, (err, result) => { if (err) { res.json({ app: err }); } res.send(result); } ); } catch (err) { console.log(err); } }; exports.deleteSwitchGames = async (req, res) => { try { if ((await SwitchGames.findById(req.params.id)) === null) { res.json({ app: "post not found" }); } else { await SwitchGames.findByIdAndRemove(req.params.id).exec(); res.json({ app: "post deleted" }); } } catch (err) { console.log(err); res.send(err); } };